---
# - name: Install plugin
#   jenkins_plugin:
#     name: build-pipeline-plugin
#     url: "{{my_jenkins_url}}"
# - name: restart jenkins
#   service: name=jenkins state=restarted

- name: Install plugins without a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    url: "{{my_jenkins_url}}"
    validate_certs: False
    url_username: "{{JENKINS_USERNAME}}"
    url_password: "{{JENKINS_USERNAME_PASSWORD}}"
  register: my_jenkins_plugin_unversioned
  when: >
    'version' not in item.value
  with_dict: "{{ my_jenkins_plugins }}"

- name: Install plugins with a specific version
  jenkins_plugin:
    name: "{{ item.key }}"
    version: "{{ item.value['version'] }}"
    url: "{{my_jenkins_url}}"
    validate_certs: False
    url_username: "{{JENKINS_USERNAME}}"
    url_password: "{{JENKINS_USERNAME_PASSWORD}}"
  register: my_jenkins_plugin_versioned
  when: >
    'version' in item.value
  with_dict: "{{ my_jenkins_plugins }}"

- name: Initiate the fact
  set_fact:
    jenkins_restart_required: no

- name: Check if restart is required by any of the versioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ my_jenkins_plugin_versioned.results }}"

- name: Check if restart is required by any of the unversioned plugins
  set_fact:
    jenkins_restart_required: yes
  when: item.changed
  with_items: "{{ my_jenkins_plugin_unversioned.results }}"

- name: Restart Jenkins if required
  service:
    name: jenkins
    state: restarted        
  when: jenkins_restart_required


- block:
    - name: Wait for Jenkins to start up
      uri:
        url: "{{my_jenkins_url}}"
        status_code: 200
        timeout: 5
        user: "{{JENKINS_USERNAME}}"
        password: "{{JENKINS_USERNAME_PASSWORD}}"
        force_basic_auth: yes
      register: jenkins_service_status  
      retries: 60
      delay: 5
      until: >
         'status' in jenkins_service_status and
         (jenkins_service_status['status'] == 200 or jenkins_service_status['status'] == 403)  
      when: jenkins_restart_required
  rescue:
    - name: Wait for Jenkins to start up
      uri:
        url: "{{my_jenkins_url}}"
        status_code: 200
        timeout: 5
      register: jenkins_service_status
      # ignore_errors: true
      # Keep trying for 5 mins in 5 sec intervals
      retries: 60
      delay: 5
      until: >
         'status' in jenkins_service_status and
         jenkins_service_status['status'] == 200
      when: jenkins_restart_required

- name: Reset the fact
  set_fact:
    jenkins_restart_required: no
  when: jenkins_restart_required

- name: Plugin pinning
  jenkins_plugin:
    name: "{{ item.key }}"
    url: "{{my_jenkins_url}}"
    state: "{{ 'pinned' if item.value['pinned'] else 'unpinned'}}"
    validate_certs: False
    url_username: "{{JENKINS_USERNAME}}"
    url_password: "{{JENKINS_USERNAME_PASSWORD}}"
  when: >
    'pinned' in item.value
  with_dict: "{{ my_jenkins_plugins }}"

- name: Plugin enabling
  jenkins_plugin:
    name: "{{ item.key }}"
    url: "{{my_jenkins_url}}"
    state: "{{ 'enabled' if item.value['enabled'] else 'disabled'}}"
    validate_certs: False
    url_username: "{{JENKINS_USERNAME}}"
    url_password: "{{JENKINS_USERNAME_PASSWORD}}"
  when: >
    'enabled' in item.value
  with_dict: "{{ my_jenkins_plugins }}"